extends layout

block extraHeader
    link(rel='stylesheet', href='stylesheets/landlordSearch.css')


block content
   div.container
    div.row.margin-bottom-10
     div.col-md-4
      div.panel.panel-default
       div.panel-heading
        i.kv-icon.fa.fa-briefcase
        span Owner: #{landlordName}
     div.col-md-4
      div.panel.panel-default
       div.panel-heading
        i.kv-icon.fa.fa-calendar-o
        span Owner Since: #{moment(ownerSinceDate).format('MM/DD/YYYY')}
     div.col-md-4
      div.panel.panel-default
       div.panel-heading
        i.kv-icon.fa.fa-hashtag
        span Properties Owned: #{propertyCountForOwner} &nbsp;
            a(href="#PropertiesOwnedHeader") (View Map)

    div.row.margin-bottom-20
     div.col-md-12
        if (locals.calls311.length > 0)
            table.table.table-striped#results
              thead
                tr
                  th #
                  th Address
                  th Owner
                  th Applicant
                  th Type
                  th Date of Incident
              tbody
                each rrow, i in calls311
                  tr
                    td #{i+1}
                    td
                        a(href= "/addressSearch/#{calls311[i].Address}") #{calls311[i].Address}
                    td #{calls311[i].APP_NAME}
                    td #{calls311[i].ApplicantRepresentative}
                    td #{calls311[i].TypeName}
                    td #{moment(calls311[i].OpenedDateTime).format('MM-DD-YYYY')}
        else
             div.text-align-center.no-311-calls
                span.margin-right-10 No 311 Calls for this Landlord
                i.fa.fa-hand-peace-o.kv-icon

    div.row.margin-bottom-20
        div.col-md-12
            div.panel.panel-default
                div.panel-heading.text-align-center#PropertiesOwnedHeader Properties Owned
                div#AllPropertiesMap

    div.row
      div.col-xs-12
        h4.landlord_properties Properties
    div.row
      each rrow, i in properties[0]
        a(href= "/addressSearch/#{properties[0][i].Address}")
          div.col-xs-12.col-md-6
            div.landlord_properties
             div.row
              div.col-xs-12.col-md-6
                p.property_address #{properties[0][i].Address}
                div
                    p
                      i.fa.fa-home.kv-icon
                      span Neighborhood: #{properties[0][i].Neighborhood}

                    p
                      i.fa.fa-list-ol.kv-icon
                      span #{properties[0][i].Tier}

                    p
                      i.fa.fa-calendar-o.kv-icon
                      span Managed Since: #{moment(properties[0][i].IssueDate).format('MM/DD/YYYY')}
              div.col-xs-12.col-md-6
                 div.landlord_streetview(style="background-repeat: no-repeat; background-position-x: center; background-image: url(#{properties[0][i].image_url});")

block script
    script(src="/javascripts/leaflet.js")
    script(type='text/javascript').
        $(document).ready(function() {
                $('#results').DataTable();
            });
        function onEachFeature(feature, layer) {
          if (feature.properties && feature.properties.pop_up_text) {
            layer.bindPopup(feature.properties.pop_up_text);
          }
        };

        var domain = [1, 3, 5, 10],
        range = ["#33a7d4", "#819ba5", "#ad8c7c", "#d07b52", "#f26426"]
        function getColor(inval) {
              for (var i = 0; i < domain.length; i++) {
                  if (inval < domain[i]) {
                      return range[i]
                  }
              }
              return range[range.length - 1]
          }
          var legendArray = [{
              label: "0", // could be "less than " + domain[0],
              color: range[0]
          }]
          for (var i = 0; i < domain.length - 1; i++) {
              var topval = domain[i + 1] - 1
              legendArray.push({
                  label: domain[i] + "-" + topval,
                  color: range[i+1]
              })
          }
          legendArray.push({
              label: domain[domain.length - 1] + "+",
              color: range[range.length - 1]
          })
          var legend = L.control({position: 'topright'});

          legend.onAdd = function (map) {

              var div = L.DomUtil.create('div', 'legend');


              // loop through our density intervals and generate a label with a colored square for each interval
              div.innerHTML += '<div style="background:white; padding-left: 10px; padding-right: 10px;"># of calls'
              for (var i = 0; i < legendArray.length; i++) {
                  var val = legendArray[i]
                  div.innerHTML +=
                    '<div style="text-align:center;background:' + val.color + '";width="50px";/>' + val.label + '</div>'
              }
              div.innerHTML += "</div>"
              return div;
          };

        var mymap = L.map('AllPropertiesMap')
        legend.addTo(mymap);

        mymap.setMaxZoom(17)
        // if we have more than one point then we set the zoom to the bbox but out 10%
        if (#{propertyCountForOwner > 1} ) {
          mymap.fitBounds(L.latLngBounds(#{bbox}).pad(0.1));

        }
        // if we have only one point we grab the first point from the bbox and set zoom to 17
        else{
          var bbox = #{bbox}
          mymap.setView(bbox[0], 17)}
        L.tileLayer('http://a.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mymap);
        var geo = !{geo}
        L.geoJson(geo, {
          onEachFeature: onEachFeature,
          pointToLayer: function (geoj, latlng) {
            return L.circleMarker(latlng, {
              radius: 7,
              stroke : true,
              color: "#434B54",
              opacity:	0.8, //	Stroke opacity.
              fill	: true,
              fillColor	:getColor(geoj["properties"]["num_reports"]),
              fillOpacity	: 1
            })
          }
        }).addTo(mymap)
