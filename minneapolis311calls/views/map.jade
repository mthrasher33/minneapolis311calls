div.px-2
  #mapid


script(src="/javascripts/leaflet.js")
script(src="/javascripts/jquery-3.1.0.min.js")

block script
  script(type='text/javascript').
    function onEachFeature(feature, layer) {
      if (feature.properties && feature.properties.pop_up_text) {
        layer.bindPopup(feature.properties.pop_up_text);
      }
    };
    //Not sure homeMarker and notHomeMarker are
    var homeMarker = {
        radius: 8,
        fillColor: "#ff7800",
        color: "red",
        fillOpacity: 1,
        strokeOpacity: 0

    };
    var notHomeMarker = {
        radius: 8,
        fillColor: "#0078ff",
        fillOpacity: 1,
        strokeOpacity: 0
    };

    var addr = $("#address span").text().trim()
    console.log(addr)
    console.log(addr)


    var mymap = L.map('mapid').setView([#{results[0][0].Y}, #{results[0][0].X}], 17)

    L.tileLayer('http://a.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(mymap);
    $(document).ready(function(){
    var domain = [1, 3, 5, 10],
    range = ["#33a7d4", "#819ba5", "#ad8c7c", "#d07b52", "#f26426"]
    function getColor(inval) {
          for (var i = 0; i < domain.length; i++) {
              if (inval < domain[i]) {
                  return range[i]
              }
          }
          return range[range.length - 1]
      }
      var legendArray = [{
          label: "0", // could be "less than " + domain[0],
          color: range[0]
      }]
      for (var i = 0; i < domain.length - 1; i++) {
          var topval = domain[i + 1] - 1
          legendArray.push({
              label: domain[i] + "-" + topval,
              color: range[i+1]
          })
      }
      legendArray.push({
          label: domain[domain.length - 1] + "+",
          color: range[range.length - 1]
      })
      var legend = L.control({position: 'topright'});

      legend.onAdd = function (map) {

          var div = L.DomUtil.create('div', 'legend');


          // loop through our density intervals and generate a label with a colored square for each interval
          div.innerHTML += '<div style="background:white padding-left: 10px; padding-right: 10px;"># of calls'
          for (var i = 0; i < legendArray.length; i++) {
              var val = legendArray[i]
              div.innerHTML +=
                '<div style="text-align:center;background:' + val.color + '";width="50px";/>' + val.label + '</div>'
          }
          div.innerHTML += "</div>"
          return div;
      };


      legend.addTo(mymap);

      var bbox = mymap.getBounds()
      var bounds_obj = {
        "West": bbox.getWest(),
        "South": bbox.getSouth(),
        "East": bbox.getEast(),
        "North": bbox.getNorth()
      };
      $.getJSON("/map/geojson", bounds_obj, function(data) {
        var features = data["features"]
        for (i in features) {
          r = features[i]
          if (r["properties"]["link"] == addr) {
            var homesite = features.splice(i, 1)
          }
        }
        var homeIcon = L.icon({
            iconUrl: "/logos/SVG/rrmapicon.svg",
            iconSize: [50,50],
            iconAnchor: [25, 35]
        })
        var geo = L.geoJson(data, {
          onEachFeature: onEachFeature,
          pointToLayer: function (geoj, latlng) {
            return L.circleMarker(latlng, {
              radius: 7,
              stroke : true,
              color: "#434B54",
              opacity:	0.8, //	Stroke opacity.
              fill	: true,
              fillColor	: getColor(geoj["properties"]["num_reports"]),
              fillOpacity	: 1
            })
          }
        })
        geo.addTo(mymap);

        L.geoJson(homesite, {
          onEachFeature: onEachFeature,
          pointToLayer: function (geoj, latlng) {
            console.log(geoj, latlng)
            return L.marker(latlng, {icon: homeIcon})
          }
        }).addTo(mymap);
      });
    });
